#pragma version ^0.3.0;

#include "../libs/stdlib.fc";
#include "../libs/delib.fc";

;; op and query_id must be loaded before
(slice, slice, int, int, cell) unpack_constructor(slice s) inline {
    slice   token_a_address     = s~load_msg_addr();
    slice   token_b_address     = s~load_msg_addr();
    int     reward_amount       = s~load_coins();
    int     reward_interval     = s~load_uint(32);
    cell    store_contract_code = s~load_ref();

    return (token_a_address, token_b_address, reward_amount,
            reward_interval, store_contract_code);
}

cell pack_provide_wallet(int query_id, slice owner_address) inline {
    return begin_cell()
        .store_uint(op::root::provide_wallet_address, 32)
        .store_uint(query_id, 64)
        .store_slice(owner_address)
        .store_int(false, 1) ;; include_address
        .end_cell();
}

cell pack_simple_token_transfer(int query_id, int token_amount, slice to_address,
                                slice response_address, int fwd_amount) inline {
    return begin_cell()
        .store_uint(op::wallet::transfer, 32)
        .store_uint(query_id, 64)
        .store_coins(token_amount)
        .store_slice(to_address)
        .store_slice(response_address)
        .store_int(false, 1)        ;; custom_payload
        .store_coins(fwd_amount)    ;; fwd_amount
        .store_int(false, 1)        ;; either fwd_body
        .end_cell();
}

cell pack_staker_info(int stamp, int staked_a, int reward_debt) inline {
    return begin_cell()
        .store_coins(stamp)
        .store_coins(staked_a)
        .store_coins(reward_debt)
        .end_cell();
}

(int, int, int) unpack_staker_info(slice s) inline {
    int stamp       = s~load_coins();
    int staked_a    = s~load_coins();
    int reward_debt = s~load_coins();

    return (stamp, staked_a, reward_debt);
}

cell pack_store_data(slice main_address, slice staker_address) inline {
    return begin_cell()
        .store_slice(main_address)
        .store_slice(staker_address)
        .store_ref(pack_staker_info(0, 0, 0))
        .end_cell();
}

cell pack_get_store_data(int query_id, int fwd_op, builder fwd_payload) inline {
    return begin_cell()
        .store_uint(op::store::get_store_data, 32)
        .store_uint(query_id, 64)
        .store_uint(fwd_op, 32)
        .store_builder(fwd_payload)
        .end_cell();
}

cell pack_store_ext_data(int query_id, cell ext_data, int fwd_op, builder fwd_payload) inline {
    return begin_cell()
        .store_uint(op::store::store_ext_data, 32)
        .store_uint(query_id, 64)
        .store_uint(fwd_op, 32)
        .store_ref(ext_data)
        .store_builder(fwd_payload)
        .end_cell();
}

bit$_ (## 1) = Bit;

bool_false$0 = Bool;
bool_true$1 = Bool;

bool_false$0 = BoolFalse;
bool_true$1 = BoolTrue;

nothing$0 {X:Type} = Maybe X;
just$1 {X:Type} value:X = Maybe X;

left$0 {X:Type} {Y:Type} value:X = Either X Y;
right$1 {X:Type} {Y:Type} value:Y = Either X Y;

addr_none$00 = MsgAddressNone;
addr_std$10 anycast:BoolFalse workchain_id:int8 address:bits256 = MsgAddrSmpl;

_ _:MsgAddressNone = StdAddrMaybeNone;
_ _:MsgAddrSmpl = StdAddrMaybeNone;

var_uint$_ {n:#} len:(#< n) value:(uint (len * 8)) = VarUInteger n;
nanograms$_ amount:(VarUInteger 16) = Coins;

// TokenRoot smart contract StateInit
// => inited_at – deploy time, will be replaced, must be 0 to invoke constructor
// => salt_bytes – random 32 bytes to generate unique state init
state_init#_ inited_at:uint64 salt_bytes:uint256 = TokenRootStateInit;

// TokenWallet smart contract StateInit
state_init#_ balance:Coins owner:StdAddrMaybeNone
    root:StdAddrMaybeNone code:^Cell = TokenWalletStateInit;

// RootInternalMsgBody      – queries/responses to the token-root contract
// WalletInternalMsgBody    – queries/responses to the token-wallet contract
// InternalMsgBody          - general queries/responses

// --------------------------------------------------------------------------------
constructor_query query_id:uint64 mintable:Bool supply:Coins fwd_amount:Coins
    fwd_body:^Cell notifbounce:Bool metadata:^Cell wallet_code:^Cell = RootInternalMsgBody;

burn_notification_query query_id:uint64 token_amount:Coins
    sender_address:MsgAddrSmpl response_address:MsgAddrSmpl = RootInternalMsgBody;

change_metadata_query query_id:uint64 new_metadata:^Cell = RootInternalMsgBody;
transfer_ownership_query query_id:uint64 new_owner_address:StdAddrMaybeNone = RootInternalMsgBody;

mint_query query_id:uint64 to_address:StdAddrMaybeNone token_amount:Coins
    fwd_amount:Coins fwd_body:^Cell notifbounce:Bool = RootInternalMsgBody;
// --------------------------------------------------------------------------------
// "internal_transfer_query" tag as in TEP74
internal_transfer_query#178d4519 query_id:uint64 token_amount:Coins
    from_address:MsgAddrSmpl response_address:MsgAddrSmpl fwd_amount:Coins
    either_bit:BoolTrue fwd_body:^Cell notifbounce:Bool = WalletInternalMsgBody;

burn_query query_id:uint64 token_amount:Coins
    response_address:StdAddrMaybeNone = WalletInternalMsgBody;

base_transfer#_ query_id:uint64 token_amount:Coins to_address:MsgAddrSmpl
    response_address:StdAddrMaybeNone custom_payload:(Maybe ^Cell)
    fwd_amount:Coins = WalletBaseTransfer;

// "transfer_query" tag as in TEP74
transfer_query#f8a7ea5 base:WalletBaseTransfer fwd_body:(Either Cell ^Cell) = WalletTransferQuery;
bouncable_transfer_query base:WalletBaseTransfer fwd_body:(Either Cell ^Cell) = WalletTransferQuery;

_ _:WalletTransferQuery = WalletInternalMsgBody;
// --------------------------------------------------------------------------------
excesses_response query_id:uint64 = InternalMsgBody;

// "transfer_notification_query" tag as in TEP74
transfer_notification_query#7362d09c query_id:uint64 token_amount:Coins
    sender_address:MsgAddrSmpl fwd_body:(Either Cell ^Cell) = InternalMsgBody;
// --------------------------------------------------------------------------------

#pragma version ^0.3.0;

global int      self::inited?;
global slice    self::initializer;
global int      self::token_a_wall_set?;
global int      self::token_b_wall_set?;
global int      self::reward_amount;
global int      self::last_reward_ts;
global int      self::reward_interval;

global slice    self::token_a_root;
global slice    self::token_b_root;
global slice    self::token_l_root;

global slice    self::token_a_wall;
global slice    self::token_b_wall;
global slice    self::token_l_wall;

global int      self::token_b_balance;
global int      self::token_b_shared;
global int      self::token_l_supply;

() load_data() impure inline_ref {
    slice data = get_data().begin_parse();

    self::inited?           = data~load_int(1);
    self::initializer       = data~load_msg_addr();
    self::token_a_wall_set? = data~load_int(1);
    self::token_b_wall_set? = data~load_int(1);
    self::reward_amount     = data~load_coins();
    self::last_reward_ts    = data~load_uint(32);
    self::reward_interval   = data~load_uint(32);

    slice roots = data~load_ref().begin_parse();
    self::token_a_root = roots~load_msg_addr();
    self::token_b_root = roots~load_msg_addr();
    self::token_l_root = roots~load_msg_addr();

    slice walls = data~load_ref().begin_parse();
    self::token_a_wall = walls~load_msg_addr();
    self::token_b_wall = walls~load_msg_addr();
    self::token_l_wall = walls~load_msg_addr();

    slice balances = data~load_ref().begin_parse();
    self::token_b_balance = balances~load_coins();
    self::token_b_shared  = balances~load_coins();
    self::token_l_supply  = balances~load_coins();
}

() save_data() impure inline_ref {
    builder data = begin_cell()
        .store_int(self::inited?, 1)
        .store_slice(self::initializer)
        .store_int(self::token_a_wall_set?, 1)
        .store_int(self::token_b_wall_set?, 1)
        .store_coins(self::reward_amount)
        .store_uint(self::last_reward_ts, 32)
        .store_uint(self::reward_interval, 32);

    builder roots = begin_cell()
        .store_slice(self::token_a_root)
        .store_slice(self::token_b_root)
        .store_slice(self::token_l_root);

    builder walls = begin_cell()
        .store_slice(self::token_a_wall)
        .store_slice(self::token_b_wall)
        .store_slice(self::token_l_wall);

    builder balances = begin_cell()
        .store_coins(self::token_b_balance)
        .store_coins(self::token_b_shared)
        .store_coins(self::token_l_supply);

    data = data.store_ref(roots.end_cell());
    data = data.store_ref(walls.end_cell());
    data = data.store_ref(balances.end_cell());

    set_data(data.end_cell());
}

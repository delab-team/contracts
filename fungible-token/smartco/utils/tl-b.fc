#pragma version ^0.3.0;

;; ---------------- op codes -----------------
const int op::root::constructor_query               = 0x7ce5f67b;
const int op::root::burn_notification_query         = 0x429ac50;
const int op::root::change_metadata_query           = 0x152b9240;
const int op::root::transfer_ownership_query        = 0x2437677e;
const int op::root::mint_query                      = 0x23b9ecc;

const int op::wallet::internal_transfer_query       = 0x178d4519; ;; TEP74
const int op::wallet::burn_query                    = 0x3a3b4252;
const int op::wallet::transfer_query                = 0xf8a7ea5;  ;; TEP74
const int op::wallet::bouncable_transfer_query      = 0x3a81b46;

const int op::general::excesses_response            = 0xd132bbf5;
const int op::general::transfer_notification_query  = 0x7362d09c; ;; TEP74
;; -------------------------------------------

;; ================================================================

;; op and query_id must be loaded before
(slice, (int, int, int, cell, int, cell, cell)) load::root::constructor_query(slice s) inline {
    int     mintable    = s~load_int(1);
    int     supply      = s~load_coins();
    int     fwd_amount  = s~load_coins();
    cell    fwd_body    = s~load_ref();
    int     notifbounce = s~load_int(1);
    cell    metadata    = s~load_ref();
    cell    wallet_code = s~load_ref();

    return (s, (mintable, supply, fwd_amount, fwd_body, notifbounce, metadata, wallet_code));
}

cell build::root::constructor_query(
    int query_id, int mintable, int supply, int fwd_amount,
    cell fwd_body, int notifbounce, cell metadata, cell wallet_code) inline {

    builder body = begin_cell()
        .store_uint(op::root::constructor_query, 32)
        .store_uint(query_id, 64)
        .store_int(mintable, 1)
        .store_coins(supply)
        .store_coins(fwd_amount)
        .store_ref(fwd_body)
        .store_int(notifbounce, 1)
        .store_ref(metadata)
        .store_ref(wallet_code);

    return body.end_cell();
}

;; ================================================================

;; op and query_id must be loaded before
(slice, (int, slice, slice)) load::root::burn_notification_query(slice s) inline {
    int     token_amount        = s~load_coins();
    slice   sender_address      = s~load_msg_addr();
    slice   response_address    = s~load_msg_addr();

    return (s, (token_amount, sender_address, response_address));
}

cell build::root::burn_notification_query(
    int query_id, int token_amount,
    slice sender_address, slice response_address) inline {

    builder body = begin_cell()
        .store_uint(op::root::burn_notification_query, 32)
        .store_uint(query_id, 64)
        .store_coins(token_amount)
        .store_slice(sender_address)
        .store_slice(response_address);

    return body.end_cell();
}

;; ================================================================

;; op and query_id must be loaded before
(slice, (cell)) load::root::change_metadata_query(slice s) inline {
    cell new_metadata = s~load_ref();

    return (s, (new_metadata));
}

cell build::root::change_metadata_query(int query_id, cell new_metadata) inline {
    builder body = begin_cell()
        .store_uint(op::root::change_metadata_query, 32)
        .store_uint(query_id, 64)
        .store_ref(new_metadata);

    return body.end_cell();
}

;; ================================================================

;; op and query_id must be loaded before
(slice, (slice)) load::root::transfer_ownership_query(slice s) inline {
    slice new_owner_address = s~load_msg_addr();
    return (s, (new_owner_address));
}

cell build::root::transfer_ownership_query(int query_id, slice new_owner_address) inline {
    builder body = begin_cell()
        .store_uint(op::root::transfer_ownership_query, 32)
        .store_uint(query_id, 64)
        .store_slice(new_owner_address);

    return body.end_cell();
}

;; ================================================================

;; op and query_id must be loaded before
(slice, (slice, int, int, cell, int)) load::root::mint_query(slice s) inline {
    slice   to_address      = s~load_msg_addr();
    int     token_amount    = s~load_coins();
    int     fwd_amount      = s~load_coins();
    cell    fwd_body        = s~load_ref();
    int     notifbounce     = s~load_int(1);

    return (s, (to_address, token_amount, fwd_amount, fwd_body, notifbounce));
}

cell build::root::mint_query(
    int query_id, slice to_address, int token_amount,
    int fwd_amount, cell fwd_body, int notifbounce) inline {

    builder body = begin_cell()
        .store_uint(op::root::mint_query, 32)
        .store_uint(query_id, 64)
        .store_slice(to_address)
        .store_coins(token_amount)
        .store_coins(fwd_amount)
        .store_ref(fwd_body)
        .store_int(notifbounce, 1);

    return body.end_cell();
}

;; ================================================================

;; op and query_id must be loaded before
(slice, (int, slice, slice, int, cell, int)) load::wallet::internal_transfer_query(slice s) inline {
    int     token_amount        = s~load_coins();
    slice   from_address        = s~load_msg_addr();
    slice   response_address    = s~load_msg_addr();
    int     fwd_amount          = s~load_coins();

    s~skip_bits(1); ;; skip either_bit:BoolTrue

    cell    fwd_body    = s~load_ref();
    int     notifbounce = s~load_int(1);

    return (s, (token_amount, from_address, response_address, fwd_amount, fwd_body, notifbounce));
}

cell build::wallet::internal_transfer_query(
    int query_id, int token_amount, slice from_address,
    slice response_address, int fwd_amount, cell fwd_body, int notifbounce) inline {

    builder body = begin_cell()
        .store_uint(op::wallet::internal_transfer_query, 32)
        .store_uint(query_id, 64)
        .store_coins(token_amount)
        .store_slice(from_address)
        .store_slice(response_address)
        .store_coins(fwd_amount)
        .store_int(true, 1)
        .store_ref(fwd_body)
        .store_int(notifbounce, 1);

    return body.end_cell();
}

;; ================================================================

;; op and query_id must be loaded before
(slice, (int, slice)) load::wallet::burn_query(slice s) inline {
    int token_amount = s~load_coins();
    slice response_address = s~load_msg_addr();

    return (s, (token_amount, response_address));
}

cell build::wallet::burn_query(
    int query_id, int token_amount,
    slice response_address) inline {

    builder body = begin_cell()
        .store_uint(op::wallet::burn_query, 32)
        .store_uint(query_id, 64)
        .store_coins(token_amount)
        .store_slice(response_address);

    return body.end_cell();
}

;; ================================================================

;; op and query_id must be loaded before
(slice, (int, slice, slice, int, cell)) load::wallet::transfer_query(slice s) inline {
    int     token_amount        = s~load_coins();
    slice   to_address          = s~load_msg_addr();
    slice   response_address    = s~load_msg_addr();
    cell    custom_payload      = s~load_maybe_ref(); ;; ignored
    int     fwd_amount          = s~load_coins();
    cell    fwd_body            = s~delib::load_either_cell();

    return (s, (token_amount, to_address, response_address, fwd_amount, fwd_body));
}

cell build::wallet::transfer_query_x(
    int query_id, int token_amount, slice to_address, slice response_address,
    cell custom_payload {- can be null -}, int fwd_amount, cell fwd_body, int bounce) inline {

    int op = bounce ? op::wallet::bouncable_transfer_query : op::wallet::transfer_query;

    builder body = begin_cell()
        .store_uint(op, 32)
        .store_uint(query_id, 64)
        .store_coins(token_amount)
        .store_slice(to_address)
        .store_slice(response_address)
        .store_maybe_ref(custom_payload)
        .store_coins(fwd_amount)
        .delib::store_either_cell(fwd_body);

    return body.end_cell();
}

;; ================================================================

;; op and query_id must be loaded before
(slice, (int)) load::general::excesses_response(slice s) inline {
    int query_id = s~load_uint(64);
    return (s, (query_id));
}

cell build::general::excesses_response(int query_id) inline {
    builder body = begin_cell()
        .store_uint(op::general::excesses_response, 32)
        .store_uint(query_id, 64);

    return body.end_cell();
}

;; ================================================================

;; op and query_id must be loaded before
(slice, (int, slice, cell)) load::general::transfer_notification_query(slice s) inline {
    int     token_amount    = s~load_coins();
    slice   sender_address  = s~load_msg_addr();
    cell    fwd_body        = s~delib::load_either_cell();

    return (s, (token_amount, sender_address, fwd_body));
}

cell build::general::transfer_notification_query(
    int query_id, int token_amount,
    slice sender_address, cell fwd_body) inline {

    builder body = begin_cell()
        .store_uint(op::general::transfer_notification_query, 32)
        .store_uint(query_id, 64)
        .store_coins(token_amount)
        .store_slice(sender_address)
        .delib::store_either_cell(fwd_body);

    return body.end_cell();
}

;; ================================================================
